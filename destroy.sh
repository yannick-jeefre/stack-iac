#!/bin/bash

# Script de destruction de l'environnement

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
TERRAFORM_DIR="terraform"
ANSIBLE_DIR="ansible"
INVENTORY_FILE="$TERRAFORM_DIR/ansible_inventory.yml"

# Fonctions utilitaires
print_header() {
    echo -e "\n${BLUE}================================================================${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}================================================================${NC}\n"
}

print_step() {
    echo -e "${CYAN}üîÑ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# V√©rification de l'existence de l'environnement
check_environment() {
    print_header "V√âRIFICATION DE L'ENVIRONNEMENT"
    
    if [ ! -d "$TERRAFORM_DIR" ]; then
        print_error "R√©pertoire $TERRAFORM_DIR introuvable"
        exit 1
    fi
    
    if [ ! -f "$TERRAFORM_DIR/terraform.tfstate" ]; then
        print_warning "Aucun √©tat Terraform trouv√©"
        print_warning "L'environnement semble d√©j√† d√©truit ou n'a jamais √©t√© cr√©√©"
        exit 0
    fi
    
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform n'est pas install√©"
        exit 1
    fi
    
    print_success "Environnement d√©tect√©"
}

# Affichage de l'√©tat actuel
show_current_state() {
    print_header "√âTAT ACTUEL DE L'ENVIRONNEMENT"
    
    cd "$TERRAFORM_DIR"
    
    print_step "Ressources Terraform actuelles :"
    terraform show -no-color | head -50
    
    if [ -f "$INVENTORY_FILE" ]; then
        print_step "VMs dans l'inventaire Ansible :"
        cat "$INVENTORY_FILE"
        
        print_step "Test de connectivit√© (optionnel) :"
        if command -v ansible &> /dev/null; then
            ansible all -i "$INVENTORY_FILE" -m ping -o 2>/dev/null || print_warning "Certaines VMs sont inaccessibles"
        else
            print_warning "Ansible non install√©, impossible de tester la connectivit√©"
        fi
    fi
    
    cd - > /dev/null
}

# Destruction Terraform
destroy_infrastructure() {
    print_header "DESTRUCTION DE L'INFRASTRUCTURE"
    
    cd "$TERRAFORM_DIR"
    
    print_step "Planification de la destruction..."
    terraform plan -destroy
    
    echo -e "\n${RED}‚ö†Ô∏è  ATTENTION ‚ö†Ô∏è${NC}"
    echo -e "${RED}Cette action va D√âTRUIRE D√âFINITIVEMENT :${NC}"
    echo "‚Ä¢ Toutes les VMs cr√©√©es"
    echo "‚Ä¢ Tous les disques associ√©s"
    echo "‚Ä¢ Toute la configuration r√©seau"
    echo "‚Ä¢ Toutes les donn√©es non sauvegard√©es"
    echo
    
    read -p "√ätes-vous ABSOLUMENT s√ªr de vouloir continuer ? (tapez 'y' pour confirmer) : " confirm
    
    if [ "$confirm" != "y" ]; then
        print_warning "Destruction annul√©e"
        exit 0
    fi
    
    print_step "Destruction en cours..."
    terraform destroy -auto-approve
    
    if [ $? -eq 0 ]; then
        print_success "Infrastructure d√©truite avec succ√®s"
    else
        print_error "√âchec de la destruction Terraform"
        print_warning "V√©rifiez manuellement l'√©tat des ressources dans Proxmox"
        exit 1
    fi
    
    cd - > /dev/null
}

# Fonction principale
main() {
    print_header "DESTRUCTION DE L'ENVIRONNEMENT TERRAFORM + ANSIBLE"
    
    echo -e "${YELLOW}Ce script va :${NC}"
    echo "1. V√©rifier l'environnement existant"
    echo "2. Afficher l'√©tat actuel"
    echo "3. Cr√©er une sauvegarde"
    echo "4. Nettoyer les VMs (optionnel)"
    echo "5. D√©truire l'infrastructure Terraform"
    echo "6. Nettoyer les fichiers locaux (optionnel)"
    echo
    
    read -p "Commencer la destruction ? (y/N) : " start
    
    if [[ ! $start =~ ^[Yy]$ ]]; then
        print_warning "Destruction annul√©e"
        exit 0
    fi
    
    # Horodatage du d√©but
    START_TIME=$(date +%s)
    
    # Ex√©cution des √©tapes
    check_environment
    show_current_state
    destroy_infrastructure
    
    # Temps d'ex√©cution
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    print_header "DESTRUCTION TERMIN√âE"
    print_success "Temps d'ex√©cution : ${DURATION}s"
    print_success "Environnement d√©truit avec succ√®s !"
    
    echo -e "\n${CYAN}üìã Pour red√©ployer :${NC}"
    echo "‚Ä¢ Ex√©cutez : ./deploy.sh"
    echo "‚Ä¢ Ou manuellement : cd terraform && terraform apply"
}

# Gestion des erreurs
trap 'print_error "Une erreur est survenue. Destruction interrompue."; exit 1' ERR

# Ex√©cution
main "$@"
